#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen */

pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const JPEG_LIB_VERSION: u32 = 62;
pub const LIBJPEG_TURBO_VERSION_NUMBER: u32 = 2000004;
pub const C_ARITH_CODING_SUPPORTED: u32 = 1;
pub const D_ARITH_CODING_SUPPORTED: u32 = 1;
pub const MEM_SRCDST_SUPPORTED: u32 = 1;
pub const WITH_SIMD: u32 = 1;
pub const BITS_IN_JSAMPLE: u32 = 8;
pub const HAVE_LOCALE_H: u32 = 1;
pub const HAVE_STDDEF_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const NEED_SYS_TYPES_H: u32 = 1;
pub const HAVE_UNSIGNED_CHAR: u32 = 1;
pub const HAVE_UNSIGNED_SHORT: u32 = 1;
pub const MAX_COMPONENTS: u32 = 10;
pub const MAXJSAMPLE: u32 = 255;
pub const CENTERJSAMPLE: u32 = 128;
pub const JPEG_MAX_DIMENSION: u32 = 65500;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const DCTSIZE: u32 = 8;
pub const DCTSIZE2: u32 = 64;
pub const NUM_QUANT_TBLS: u32 = 4;
pub const NUM_HUFF_TBLS: u32 = 4;
pub const NUM_ARITH_TBLS: u32 = 16;
pub const MAX_COMPS_IN_SCAN: u32 = 4;
pub const MAX_SAMP_FACTOR: u32 = 4;
pub const C_MAX_BLOCKS_IN_MCU: u32 = 10;
pub const D_MAX_BLOCKS_IN_MCU: u32 = 10;
pub const JCS_EXTENSIONS: u32 = 1;
pub const JCS_ALPHA_EXTENSIONS: u32 = 1;
pub const JMSG_LENGTH_MAX: u32 = 200;
pub const JMSG_STR_PARM_MAX: u32 = 80;
pub const JPOOL_PERMANENT: u32 = 0;
pub const JPOOL_IMAGE: u32 = 1;
pub const JPOOL_NUMPOOLS: u32 = 2;
pub const JPEG_SUSPENDED: u32 = 0;
pub const JPEG_HEADER_OK: u32 = 1;
pub const JPEG_HEADER_TABLES_ONLY: u32 = 2;
pub const JPEG_REACHED_SOS: u32 = 1;
pub const JPEG_REACHED_EOI: u32 = 2;
pub const JPEG_ROW_COMPLETED: u32 = 3;
pub const JPEG_SCAN_COMPLETED: u32 = 4;
pub const JPEG_RST0: u32 = 208;
pub const JPEG_EOI: u32 = 217;
pub const JPEG_APP0: u32 = 224;
pub const JPEG_COM: u32 = 254;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type ssize_t = __darwin_ssize_t;
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut size_t,
        __stream: *mut FILE,
    ) -> ssize_t;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: size_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: size_t,
        arg3: ::std::os::raw::c_int,
        arg4: size_t,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type JSAMPLE = ::std::os::raw::c_uchar;
pub type JCOEF = ::std::os::raw::c_short;
pub type JOCTET = ::std::os::raw::c_uchar;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type INT16 = ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_long;
pub type JDIMENSION = ::std::os::raw::c_uint;
pub type boolean = ::std::os::raw::c_int;
pub type JSAMPROW = *mut JSAMPLE;
pub type JSAMPARRAY = *mut JSAMPROW;
pub type JSAMPIMAGE = *mut JSAMPARRAY;
pub type JBLOCK = [JCOEF; 64usize];
pub type JBLOCKROW = *mut JBLOCK;
pub type JBLOCKARRAY = *mut JBLOCKROW;
pub type JBLOCKIMAGE = *mut JBLOCKARRAY;
pub type JCOEFPTR = *mut JCOEF;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JQUANT_TBL {
    pub quantval: [UINT16; 64usize],
    pub sent_table: boolean,
}
#[test]
fn bindgen_test_layout_JQUANT_TBL() {
    assert_eq!(
        ::std::mem::size_of::<JQUANT_TBL>(),
        132usize,
        concat!("Size of: ", stringify!(JQUANT_TBL))
    );
    assert_eq!(
        ::std::mem::align_of::<JQUANT_TBL>(),
        4usize,
        concat!("Alignment of ", stringify!(JQUANT_TBL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JQUANT_TBL>())).quantval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JQUANT_TBL),
            "::",
            stringify!(quantval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JQUANT_TBL>())).sent_table as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(JQUANT_TBL),
            "::",
            stringify!(sent_table)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JHUFF_TBL {
    pub bits: [UINT8; 17usize],
    pub huffval: [UINT8; 256usize],
    pub sent_table: boolean,
}
#[test]
fn bindgen_test_layout_JHUFF_TBL() {
    assert_eq!(
        ::std::mem::size_of::<JHUFF_TBL>(),
        280usize,
        concat!("Size of: ", stringify!(JHUFF_TBL))
    );
    assert_eq!(
        ::std::mem::align_of::<JHUFF_TBL>(),
        4usize,
        concat!("Alignment of ", stringify!(JHUFF_TBL))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JHUFF_TBL>())).bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JHUFF_TBL>())).huffval as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(huffval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<JHUFF_TBL>())).sent_table as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(JHUFF_TBL),
            "::",
            stringify!(sent_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_component_info {
    pub component_id: ::std::os::raw::c_int,
    pub component_index: ::std::os::raw::c_int,
    pub h_samp_factor: ::std::os::raw::c_int,
    pub v_samp_factor: ::std::os::raw::c_int,
    pub quant_tbl_no: ::std::os::raw::c_int,
    pub dc_tbl_no: ::std::os::raw::c_int,
    pub ac_tbl_no: ::std::os::raw::c_int,
    pub width_in_blocks: JDIMENSION,
    pub height_in_blocks: JDIMENSION,
    pub DCT_scaled_size: ::std::os::raw::c_int,
    pub downsampled_width: JDIMENSION,
    pub downsampled_height: JDIMENSION,
    pub component_needed: boolean,
    pub MCU_width: ::std::os::raw::c_int,
    pub MCU_height: ::std::os::raw::c_int,
    pub MCU_blocks: ::std::os::raw::c_int,
    pub MCU_sample_width: ::std::os::raw::c_int,
    pub last_col_width: ::std::os::raw::c_int,
    pub last_row_height: ::std::os::raw::c_int,
    pub quant_table: *mut JQUANT_TBL,
    pub dct_table: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_jpeg_component_info() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_component_info>(),
        96usize,
        concat!("Size of: ", stringify!(jpeg_component_info))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_component_info>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_component_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).component_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).component_index as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).h_samp_factor as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(h_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).v_samp_factor as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(v_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).quant_tbl_no as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(quant_tbl_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).dc_tbl_no as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(dc_tbl_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).ac_tbl_no as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(ac_tbl_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).width_in_blocks as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(width_in_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).height_in_blocks as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(height_in_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).DCT_scaled_size as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(DCT_scaled_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).downsampled_width as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(downsampled_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).downsampled_height as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(downsampled_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).component_needed as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(component_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).MCU_width as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).MCU_height as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).MCU_blocks as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_blocks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).MCU_sample_width as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(MCU_sample_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).last_col_width as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(last_col_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_component_info>())).last_row_height as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(last_row_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).quant_table as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(quant_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_component_info>())).dct_table as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_component_info),
            "::",
            stringify!(dct_table)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_scan_info {
    pub comps_in_scan: ::std::os::raw::c_int,
    pub component_index: [::std::os::raw::c_int; 4usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_scan_info() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_scan_info>(),
        36usize,
        concat!("Size of: ", stringify!(jpeg_scan_info))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_scan_info>(),
        4usize,
        concat!("Alignment of ", stringify!(jpeg_scan_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).comps_in_scan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).component_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(component_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Ss as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Se as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Ah as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_scan_info>())).Al as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_scan_info),
            "::",
            stringify!(Al)
        )
    );
}
pub type jpeg_saved_marker_ptr = *mut jpeg_marker_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_struct {
    pub next: jpeg_saved_marker_ptr,
    pub marker: UINT8,
    pub original_length: ::std::os::raw::c_uint,
    pub data_length: ::std::os::raw::c_uint,
    pub data: *mut JOCTET,
}
#[test]
fn bindgen_test_layout_jpeg_marker_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_marker_struct>(),
        32usize,
        concat!("Size of: ", stringify!(jpeg_marker_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_marker_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_marker_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).marker as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_marker_struct>())).original_length as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(original_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).data_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_marker_struct>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_marker_struct),
            "::",
            stringify!(data)
        )
    );
}
pub const J_COLOR_SPACE_JCS_UNKNOWN: J_COLOR_SPACE = 0;
pub const J_COLOR_SPACE_JCS_GRAYSCALE: J_COLOR_SPACE = 1;
pub const J_COLOR_SPACE_JCS_RGB: J_COLOR_SPACE = 2;
pub const J_COLOR_SPACE_JCS_YCbCr: J_COLOR_SPACE = 3;
pub const J_COLOR_SPACE_JCS_CMYK: J_COLOR_SPACE = 4;
pub const J_COLOR_SPACE_JCS_YCCK: J_COLOR_SPACE = 5;
pub const J_COLOR_SPACE_JCS_EXT_RGB: J_COLOR_SPACE = 6;
pub const J_COLOR_SPACE_JCS_EXT_RGBX: J_COLOR_SPACE = 7;
pub const J_COLOR_SPACE_JCS_EXT_BGR: J_COLOR_SPACE = 8;
pub const J_COLOR_SPACE_JCS_EXT_BGRX: J_COLOR_SPACE = 9;
pub const J_COLOR_SPACE_JCS_EXT_XBGR: J_COLOR_SPACE = 10;
pub const J_COLOR_SPACE_JCS_EXT_XRGB: J_COLOR_SPACE = 11;
pub const J_COLOR_SPACE_JCS_EXT_RGBA: J_COLOR_SPACE = 12;
pub const J_COLOR_SPACE_JCS_EXT_BGRA: J_COLOR_SPACE = 13;
pub const J_COLOR_SPACE_JCS_EXT_ABGR: J_COLOR_SPACE = 14;
pub const J_COLOR_SPACE_JCS_EXT_ARGB: J_COLOR_SPACE = 15;
pub const J_COLOR_SPACE_JCS_RGB565: J_COLOR_SPACE = 16;
pub type J_COLOR_SPACE = u32;
pub const J_DCT_METHOD_JDCT_ISLOW: J_DCT_METHOD = 0;
pub const J_DCT_METHOD_JDCT_IFAST: J_DCT_METHOD = 1;
pub const J_DCT_METHOD_JDCT_FLOAT: J_DCT_METHOD = 2;
pub type J_DCT_METHOD = u32;
pub const J_DITHER_MODE_JDITHER_NONE: J_DITHER_MODE = 0;
pub const J_DITHER_MODE_JDITHER_ORDERED: J_DITHER_MODE = 1;
pub const J_DITHER_MODE_JDITHER_FS: J_DITHER_MODE = 2;
pub type J_DITHER_MODE = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_common_struct {
    pub err: *mut jpeg_error_mgr,
    pub mem: *mut jpeg_memory_mgr,
    pub progress: *mut jpeg_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_common_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_common_struct>(),
        40usize,
        concat!("Size of: ", stringify!(jpeg_common_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_common_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_common_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_common_struct>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_common_struct>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_common_struct>())).progress as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_common_struct>())).client_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_common_struct>())).is_decompressor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_common_struct>())).global_state as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_common_struct),
            "::",
            stringify!(global_state)
        )
    );
}
pub type j_common_ptr = *mut jpeg_common_struct;
pub type j_compress_ptr = *mut jpeg_compress_struct;
pub type j_decompress_ptr = *mut jpeg_decompress_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_compress_struct {
    pub err: *mut jpeg_error_mgr,
    pub mem: *mut jpeg_memory_mgr,
    pub progress: *mut jpeg_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
    pub dest: *mut jpeg_destination_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub input_components: ::std::os::raw::c_int,
    pub in_color_space: J_COLOR_SPACE,
    pub input_gamma: f64,
    pub data_precision: ::std::os::raw::c_int,
    pub num_components: ::std::os::raw::c_int,
    pub jpeg_color_space: J_COLOR_SPACE,
    pub comp_info: *mut jpeg_component_info,
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub num_scans: ::std::os::raw::c_int,
    pub scan_info: *const jpeg_scan_info,
    pub raw_data_in: boolean,
    pub arith_code: boolean,
    pub optimize_coding: boolean,
    pub CCIR601_sampling: boolean,
    pub smoothing_factor: ::std::os::raw::c_int,
    pub dct_method: J_DCT_METHOD,
    pub restart_interval: ::std::os::raw::c_uint,
    pub restart_in_rows: ::std::os::raw::c_int,
    pub write_JFIF_header: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub write_Adobe_marker: boolean,
    pub next_scanline: JDIMENSION,
    pub progressive_mode: boolean,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpeg_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub blocks_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub master: *mut jpeg_comp_master,
    pub main: *mut jpeg_c_main_controller,
    pub prep: *mut jpeg_c_prep_controller,
    pub coef: *mut jpeg_c_coef_controller,
    pub marker: *mut jpeg_marker_writer,
    pub cconvert: *mut jpeg_color_converter,
    pub downsample: *mut jpeg_downsampler,
    pub fdct: *mut jpeg_forward_dct,
    pub entropy: *mut jpeg_entropy_encoder,
    pub script_space: *mut jpeg_scan_info,
    pub script_space_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_compress_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_compress_struct>(),
        520usize,
        concat!("Size of: ", stringify!(jpeg_compress_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_compress_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_compress_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).progress as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).client_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).is_decompressor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).global_state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(global_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).dest as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).image_width as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).image_height as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).input_components as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(input_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).in_color_space as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(in_color_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).input_gamma as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(input_gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).data_precision as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(data_precision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).num_components as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(num_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).jpeg_color_space as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(jpeg_color_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).comp_info as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).quant_tbl_ptrs as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(quant_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).dc_huff_tbl_ptrs as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(dc_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).ac_huff_tbl_ptrs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(ac_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).arith_dc_L as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_dc_L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).arith_dc_U as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_dc_U)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).arith_ac_K as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_ac_K)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).num_scans as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(num_scans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).scan_info as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(scan_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).raw_data_in as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(raw_data_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).arith_code as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(arith_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).optimize_coding as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(optimize_coding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).CCIR601_sampling as *const _ as usize
        },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(CCIR601_sampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).smoothing_factor as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(smoothing_factor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).dct_method as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(dct_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).restart_interval as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(restart_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).restart_in_rows as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(restart_in_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).write_JFIF_header as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(write_JFIF_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).JFIF_major_version as *const _ as usize
        },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(JFIF_major_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).JFIF_minor_version as *const _ as usize
        },
        293usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(JFIF_minor_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).density_unit as *const _ as usize
        },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(density_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).X_density as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(X_density)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).Y_density as *const _ as usize },
        298usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Y_density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).write_Adobe_marker as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(write_Adobe_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).next_scanline as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(next_scanline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).progressive_mode as *const _ as usize
        },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(progressive_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).max_h_samp_factor as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(max_h_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).max_v_samp_factor as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(max_v_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).total_iMCU_rows as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(total_iMCU_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).comps_in_scan as *const _ as usize
        },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).cur_comp_info as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(cur_comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).MCUs_per_row as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(MCUs_per_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).MCU_rows_in_scan as *const _ as usize
        },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(MCU_rows_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).blocks_in_MCU as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(blocks_in_MCU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).MCU_membership as *const _ as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(MCU_membership)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).Ss as *const _ as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).Se as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).Ah as *const _ as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).Al as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(Al)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).master as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).main as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).prep as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(prep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).coef as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(coef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).marker as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).cconvert as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(cconvert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).downsample as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(downsample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).fdct as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(fdct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_compress_struct>())).entropy as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).script_space as *const _ as usize
        },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(script_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_compress_struct>())).script_space_size as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_compress_struct),
            "::",
            stringify!(script_space_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_decompress_struct {
    pub err: *mut jpeg_error_mgr,
    pub mem: *mut jpeg_memory_mgr,
    pub progress: *mut jpeg_progress_mgr,
    pub client_data: *mut ::std::os::raw::c_void,
    pub is_decompressor: boolean,
    pub global_state: ::std::os::raw::c_int,
    pub src: *mut jpeg_source_mgr,
    pub image_width: JDIMENSION,
    pub image_height: JDIMENSION,
    pub num_components: ::std::os::raw::c_int,
    pub jpeg_color_space: J_COLOR_SPACE,
    pub out_color_space: J_COLOR_SPACE,
    pub scale_num: ::std::os::raw::c_uint,
    pub scale_denom: ::std::os::raw::c_uint,
    pub output_gamma: f64,
    pub buffered_image: boolean,
    pub raw_data_out: boolean,
    pub dct_method: J_DCT_METHOD,
    pub do_fancy_upsampling: boolean,
    pub do_block_smoothing: boolean,
    pub quantize_colors: boolean,
    pub dither_mode: J_DITHER_MODE,
    pub two_pass_quantize: boolean,
    pub desired_number_of_colors: ::std::os::raw::c_int,
    pub enable_1pass_quant: boolean,
    pub enable_external_quant: boolean,
    pub enable_2pass_quant: boolean,
    pub output_width: JDIMENSION,
    pub output_height: JDIMENSION,
    pub out_color_components: ::std::os::raw::c_int,
    pub output_components: ::std::os::raw::c_int,
    pub rec_outbuf_height: ::std::os::raw::c_int,
    pub actual_number_of_colors: ::std::os::raw::c_int,
    pub colormap: JSAMPARRAY,
    pub output_scanline: JDIMENSION,
    pub input_scan_number: ::std::os::raw::c_int,
    pub input_iMCU_row: JDIMENSION,
    pub output_scan_number: ::std::os::raw::c_int,
    pub output_iMCU_row: JDIMENSION,
    pub coef_bits: *mut [::std::os::raw::c_int; 64usize],
    pub quant_tbl_ptrs: [*mut JQUANT_TBL; 4usize],
    pub dc_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub ac_huff_tbl_ptrs: [*mut JHUFF_TBL; 4usize],
    pub data_precision: ::std::os::raw::c_int,
    pub comp_info: *mut jpeg_component_info,
    pub progressive_mode: boolean,
    pub arith_code: boolean,
    pub arith_dc_L: [UINT8; 16usize],
    pub arith_dc_U: [UINT8; 16usize],
    pub arith_ac_K: [UINT8; 16usize],
    pub restart_interval: ::std::os::raw::c_uint,
    pub saw_JFIF_marker: boolean,
    pub JFIF_major_version: UINT8,
    pub JFIF_minor_version: UINT8,
    pub density_unit: UINT8,
    pub X_density: UINT16,
    pub Y_density: UINT16,
    pub saw_Adobe_marker: boolean,
    pub Adobe_transform: UINT8,
    pub CCIR601_sampling: boolean,
    pub marker_list: jpeg_saved_marker_ptr,
    pub max_h_samp_factor: ::std::os::raw::c_int,
    pub max_v_samp_factor: ::std::os::raw::c_int,
    pub min_DCT_scaled_size: ::std::os::raw::c_int,
    pub total_iMCU_rows: JDIMENSION,
    pub sample_range_limit: *mut JSAMPLE,
    pub comps_in_scan: ::std::os::raw::c_int,
    pub cur_comp_info: [*mut jpeg_component_info; 4usize],
    pub MCUs_per_row: JDIMENSION,
    pub MCU_rows_in_scan: JDIMENSION,
    pub blocks_in_MCU: ::std::os::raw::c_int,
    pub MCU_membership: [::std::os::raw::c_int; 10usize],
    pub Ss: ::std::os::raw::c_int,
    pub Se: ::std::os::raw::c_int,
    pub Ah: ::std::os::raw::c_int,
    pub Al: ::std::os::raw::c_int,
    pub unread_marker: ::std::os::raw::c_int,
    pub master: *mut jpeg_decomp_master,
    pub main: *mut jpeg_d_main_controller,
    pub coef: *mut jpeg_d_coef_controller,
    pub post: *mut jpeg_d_post_controller,
    pub inputctl: *mut jpeg_input_controller,
    pub marker: *mut jpeg_marker_reader,
    pub entropy: *mut jpeg_entropy_decoder,
    pub idct: *mut jpeg_inverse_dct,
    pub upsample: *mut jpeg_upsampler,
    pub cconvert: *mut jpeg_color_deconverter,
    pub cquantize: *mut jpeg_color_quantizer,
}
#[test]
fn bindgen_test_layout_jpeg_decompress_struct() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_decompress_struct>(),
        632usize,
        concat!("Size of: ", stringify!(jpeg_decompress_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_decompress_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_decompress_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).err as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).progress as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).client_data as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(client_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).is_decompressor as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(is_decompressor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).global_state as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(global_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).src as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).image_width as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(image_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).image_height as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(image_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).num_components as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(num_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).jpeg_color_space as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(jpeg_color_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).out_color_space as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(out_color_space)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).scale_num as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(scale_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).scale_denom as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(scale_denom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_gamma as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_gamma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).buffered_image as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(buffered_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).raw_data_out as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(raw_data_out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).dct_method as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(dct_method)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).do_fancy_upsampling as *const _
                as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(do_fancy_upsampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).do_block_smoothing as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(do_block_smoothing)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).quantize_colors as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(quantize_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).dither_mode as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(dither_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).two_pass_quantize as *const _
                as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(two_pass_quantize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).desired_number_of_colors as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(desired_number_of_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).enable_1pass_quant as *const _
                as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(enable_1pass_quant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).enable_external_quant as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(enable_external_quant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).enable_2pass_quant as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(enable_2pass_quant)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_width as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_height as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).out_color_components as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(out_color_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_components as *const _
                as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_components)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).rec_outbuf_height as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(rec_outbuf_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).actual_number_of_colors as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(actual_number_of_colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).colormap as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(colormap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_scanline as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_scanline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).input_scan_number as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(input_scan_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).input_iMCU_row as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(input_iMCU_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_scan_number as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_scan_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).output_iMCU_row as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(output_iMCU_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).coef_bits as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(coef_bits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).quant_tbl_ptrs as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(quant_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).dc_huff_tbl_ptrs as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(dc_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).ac_huff_tbl_ptrs as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(ac_huff_tbl_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).data_precision as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(data_precision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).comp_info as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).progressive_mode as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(progressive_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).arith_code as *const _ as usize
        },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).arith_dc_L as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_dc_L)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).arith_dc_U as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_dc_U)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).arith_ac_K as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(arith_ac_K)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).restart_interval as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(restart_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).saw_JFIF_marker as *const _ as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(saw_JFIF_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).JFIF_major_version as *const _
                as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(JFIF_major_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).JFIF_minor_version as *const _
                as usize
        },
        377usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(JFIF_minor_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).density_unit as *const _ as usize
        },
        378usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(density_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).X_density as *const _ as usize
        },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(X_density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).Y_density as *const _ as usize
        },
        382usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Y_density)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).saw_Adobe_marker as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(saw_Adobe_marker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).Adobe_transform as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Adobe_transform)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).CCIR601_sampling as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(CCIR601_sampling)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).marker_list as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(marker_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).max_h_samp_factor as *const _
                as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(max_h_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).max_v_samp_factor as *const _
                as usize
        },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(max_v_samp_factor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).min_DCT_scaled_size as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(min_DCT_scaled_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).total_iMCU_rows as *const _ as usize
        },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(total_iMCU_rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).sample_range_limit as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(sample_range_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).comps_in_scan as *const _ as usize
        },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(comps_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).cur_comp_info as *const _ as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(cur_comp_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).MCUs_per_row as *const _ as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(MCUs_per_row)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).MCU_rows_in_scan as *const _ as usize
        },
        476usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(MCU_rows_in_scan)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).blocks_in_MCU as *const _ as usize
        },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(blocks_in_MCU)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).MCU_membership as *const _ as usize
        },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(MCU_membership)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).Ss as *const _ as usize },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).Se as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Se)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).Ah as *const _ as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Ah)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).Al as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(Al)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).unread_marker as *const _ as usize
        },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(unread_marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).master as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(master)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).main as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(main)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).coef as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(coef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).post as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(post)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).inputctl as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(inputctl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).marker as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(marker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).entropy as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(entropy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).idct as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(idct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).upsample as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(upsample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_decompress_struct>())).cconvert as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(cconvert)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_decompress_struct>())).cquantize as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_decompress_struct),
            "::",
            stringify!(cquantize)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct jpeg_error_mgr {
    pub error_exit: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub emit_message: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_common_ptr, msg_level: ::std::os::raw::c_int),
    >,
    pub output_message: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub format_message: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_common_ptr, buffer: *mut ::std::os::raw::c_char),
    >,
    pub reset_error_mgr: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub msg_code: ::std::os::raw::c_int,
    pub msg_parm: jpeg_error_mgr__bindgen_ty_1,
    pub trace_level: ::std::os::raw::c_int,
    pub num_warnings: ::std::os::raw::c_long,
    pub jpeg_message_table: *const *const ::std::os::raw::c_char,
    pub last_jpeg_message: ::std::os::raw::c_int,
    pub addon_message_table: *const *const ::std::os::raw::c_char,
    pub first_addon_message: ::std::os::raw::c_int,
    pub last_addon_message: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union jpeg_error_mgr__bindgen_ty_1 {
    pub i: [::std::os::raw::c_int; 8usize],
    pub s: [::std::os::raw::c_char; 80usize],
    _bindgen_union_align: [u32; 20usize],
}
#[test]
fn bindgen_test_layout_jpeg_error_mgr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_error_mgr__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(jpeg_error_mgr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_error_mgr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(jpeg_error_mgr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr__bindgen_ty_1>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
}
#[test]
fn bindgen_test_layout_jpeg_error_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_error_mgr>(),
        168usize,
        concat!("Size of: ", stringify!(jpeg_error_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_error_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_error_mgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).error_exit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(error_exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).emit_message as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(emit_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).output_message as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(output_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).format_message as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(format_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).reset_error_mgr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(reset_error_mgr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).msg_code as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(msg_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).msg_parm as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(msg_parm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).trace_level as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(trace_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_error_mgr>())).num_warnings as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(num_warnings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_error_mgr>())).jpeg_message_table as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(jpeg_message_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_error_mgr>())).last_jpeg_message as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(last_jpeg_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_error_mgr>())).addon_message_table as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(addon_message_table)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_error_mgr>())).first_addon_message as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(first_addon_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_error_mgr>())).last_addon_message as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_error_mgr),
            "::",
            stringify!(last_addon_message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_progress_mgr {
    pub progress_monitor: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub pass_counter: ::std::os::raw::c_long,
    pub pass_limit: ::std::os::raw::c_long,
    pub completed_passes: ::std::os::raw::c_int,
    pub total_passes: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_jpeg_progress_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_progress_mgr>(),
        32usize,
        concat!("Size of: ", stringify!(jpeg_progress_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_progress_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_progress_mgr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_progress_mgr>())).progress_monitor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(progress_monitor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_progress_mgr>())).pass_counter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(pass_counter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_progress_mgr>())).pass_limit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(pass_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_progress_mgr>())).completed_passes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(completed_passes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_progress_mgr>())).total_passes as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_progress_mgr),
            "::",
            stringify!(total_passes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_destination_mgr {
    pub next_output_byte: *mut JOCTET,
    pub free_in_buffer: size_t,
    pub init_destination: ::std::option::Option<unsafe extern "C" fn(cinfo: j_compress_ptr)>,
    pub empty_output_buffer:
        ::std::option::Option<unsafe extern "C" fn(cinfo: j_compress_ptr) -> boolean>,
    pub term_destination: ::std::option::Option<unsafe extern "C" fn(cinfo: j_compress_ptr)>,
}
#[test]
fn bindgen_test_layout_jpeg_destination_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_destination_mgr>(),
        40usize,
        concat!("Size of: ", stringify!(jpeg_destination_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_destination_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_destination_mgr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_destination_mgr>())).next_output_byte as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(next_output_byte)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_destination_mgr>())).free_in_buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(free_in_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_destination_mgr>())).init_destination as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(init_destination)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_destination_mgr>())).empty_output_buffer as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(empty_output_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_destination_mgr>())).term_destination as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_destination_mgr),
            "::",
            stringify!(term_destination)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_source_mgr {
    pub next_input_byte: *const JOCTET,
    pub bytes_in_buffer: size_t,
    pub init_source: ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr)>,
    pub fill_input_buffer:
        ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr) -> boolean>,
    pub skip_input_data: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_decompress_ptr, num_bytes: ::std::os::raw::c_long),
    >,
    pub resync_to_restart: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_decompress_ptr, desired: ::std::os::raw::c_int) -> boolean,
    >,
    pub term_source: ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr)>,
}
#[test]
fn bindgen_test_layout_jpeg_source_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_source_mgr>(),
        56usize,
        concat!("Size of: ", stringify!(jpeg_source_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_source_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_source_mgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_source_mgr>())).next_input_byte as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(next_input_byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_source_mgr>())).bytes_in_buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(bytes_in_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_source_mgr>())).init_source as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(init_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_source_mgr>())).fill_input_buffer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(fill_input_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_source_mgr>())).skip_input_data as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(skip_input_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_source_mgr>())).resync_to_restart as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(resync_to_restart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_source_mgr>())).term_source as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_source_mgr),
            "::",
            stringify!(term_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_sarray_control {
    _unused: [u8; 0],
}
pub type jvirt_sarray_ptr = *mut jvirt_sarray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jvirt_barray_control {
    _unused: [u8; 0],
}
pub type jvirt_barray_ptr = *mut jvirt_barray_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_memory_mgr {
    pub alloc_small: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            sizeofobject: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub alloc_large: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            sizeofobject: size_t,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub alloc_sarray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            samplesperrow: JDIMENSION,
            numrows: JDIMENSION,
        ) -> JSAMPARRAY,
    >,
    pub alloc_barray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            blocksperrow: JDIMENSION,
            numrows: JDIMENSION,
        ) -> JBLOCKARRAY,
    >,
    pub request_virt_sarray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            pre_zero: boolean,
            samplesperrow: JDIMENSION,
            numrows: JDIMENSION,
            maxaccess: JDIMENSION,
        ) -> jvirt_sarray_ptr,
    >,
    pub request_virt_barray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            pool_id: ::std::os::raw::c_int,
            pre_zero: boolean,
            blocksperrow: JDIMENSION,
            numrows: JDIMENSION,
            maxaccess: JDIMENSION,
        ) -> jvirt_barray_ptr,
    >,
    pub realize_virt_arrays: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub access_virt_sarray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            ptr: jvirt_sarray_ptr,
            start_row: JDIMENSION,
            num_rows: JDIMENSION,
            writable: boolean,
        ) -> JSAMPARRAY,
    >,
    pub access_virt_barray: ::std::option::Option<
        unsafe extern "C" fn(
            cinfo: j_common_ptr,
            ptr: jvirt_barray_ptr,
            start_row: JDIMENSION,
            num_rows: JDIMENSION,
            writable: boolean,
        ) -> JBLOCKARRAY,
    >,
    pub free_pool: ::std::option::Option<
        unsafe extern "C" fn(cinfo: j_common_ptr, pool_id: ::std::os::raw::c_int),
    >,
    pub self_destruct: ::std::option::Option<unsafe extern "C" fn(cinfo: j_common_ptr)>,
    pub max_memory_to_use: ::std::os::raw::c_long,
    pub max_alloc_chunk: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_jpeg_memory_mgr() {
    assert_eq!(
        ::std::mem::size_of::<jpeg_memory_mgr>(),
        104usize,
        concat!("Size of: ", stringify!(jpeg_memory_mgr))
    );
    assert_eq!(
        ::std::mem::align_of::<jpeg_memory_mgr>(),
        8usize,
        concat!("Alignment of ", stringify!(jpeg_memory_mgr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).alloc_small as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_small)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).alloc_large as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_large)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).alloc_sarray as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_sarray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).alloc_barray as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(alloc_barray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_memory_mgr>())).request_virt_sarray as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(request_virt_sarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_memory_mgr>())).request_virt_barray as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(request_virt_barray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_memory_mgr>())).realize_virt_arrays as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(realize_virt_arrays)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_memory_mgr>())).access_virt_sarray as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(access_virt_sarray)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_memory_mgr>())).access_virt_barray as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(access_virt_barray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).free_pool as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(free_pool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).self_destruct as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(self_destruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<jpeg_memory_mgr>())).max_memory_to_use as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(max_memory_to_use)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<jpeg_memory_mgr>())).max_alloc_chunk as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(jpeg_memory_mgr),
            "::",
            stringify!(max_alloc_chunk)
        )
    );
}
pub type jpeg_marker_parser_method =
    ::std::option::Option<unsafe extern "C" fn(cinfo: j_decompress_ptr) -> boolean>;
extern "C" {
    pub fn jpeg_std_error(err: *mut jpeg_error_mgr) -> *mut jpeg_error_mgr;
}
extern "C" {
    pub fn jpeg_CreateCompress(
        cinfo: j_compress_ptr,
        version: ::std::os::raw::c_int,
        structsize: size_t,
    );
}
extern "C" {
    pub fn jpeg_CreateDecompress(
        cinfo: j_decompress_ptr,
        version: ::std::os::raw::c_int,
        structsize: size_t,
    );
}
extern "C" {
    pub fn jpeg_destroy_compress(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_destroy_decompress(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg_stdio_dest(cinfo: j_compress_ptr, outfile: *mut FILE);
}
extern "C" {
    pub fn jpeg_stdio_src(cinfo: j_decompress_ptr, infile: *mut FILE);
}
extern "C" {
    pub fn jpeg_mem_dest(
        cinfo: j_compress_ptr,
        outbuffer: *mut *mut ::std::os::raw::c_uchar,
        outsize: *mut ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn jpeg_mem_src(
        cinfo: j_decompress_ptr,
        inbuffer: *const ::std::os::raw::c_uchar,
        insize: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn jpeg_set_defaults(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_set_colorspace(cinfo: j_compress_ptr, colorspace: J_COLOR_SPACE);
}
extern "C" {
    pub fn jpeg_default_colorspace(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_set_quality(
        cinfo: j_compress_ptr,
        quality: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
}
extern "C" {
    pub fn jpeg_set_linear_quality(
        cinfo: j_compress_ptr,
        scale_factor: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
}
extern "C" {
    pub fn jpeg_add_quant_table(
        cinfo: j_compress_ptr,
        which_tbl: ::std::os::raw::c_int,
        basic_table: *const ::std::os::raw::c_uint,
        scale_factor: ::std::os::raw::c_int,
        force_baseline: boolean,
    );
}
extern "C" {
    pub fn jpeg_quality_scaling(quality: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg_simple_progression(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_suppress_tables(cinfo: j_compress_ptr, suppress: boolean);
}
extern "C" {
    pub fn jpeg_alloc_quant_table(cinfo: j_common_ptr) -> *mut JQUANT_TBL;
}
extern "C" {
    pub fn jpeg_alloc_huff_table(cinfo: j_common_ptr) -> *mut JHUFF_TBL;
}
extern "C" {
    pub fn jpeg_start_compress(cinfo: j_compress_ptr, write_all_tables: boolean);
}
extern "C" {
    pub fn jpeg_write_scanlines(
        cinfo: j_compress_ptr,
        scanlines: JSAMPARRAY,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_finish_compress(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_write_raw_data(
        cinfo: j_compress_ptr,
        data: JSAMPIMAGE,
        num_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_write_marker(
        cinfo: j_compress_ptr,
        marker: ::std::os::raw::c_int,
        dataptr: *const JOCTET,
        datalen: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg_write_m_header(
        cinfo: j_compress_ptr,
        marker: ::std::os::raw::c_int,
        datalen: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg_write_m_byte(cinfo: j_compress_ptr, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn jpeg_write_tables(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_write_icc_profile(
        cinfo: j_compress_ptr,
        icc_data_ptr: *const JOCTET,
        icc_data_len: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg_read_header(
        cinfo: j_decompress_ptr,
        require_image: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg_start_decompress(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg_read_scanlines(
        cinfo: j_decompress_ptr,
        scanlines: JSAMPARRAY,
        max_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_skip_scanlines(cinfo: j_decompress_ptr, num_lines: JDIMENSION) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_crop_scanline(
        cinfo: j_decompress_ptr,
        xoffset: *mut JDIMENSION,
        width: *mut JDIMENSION,
    );
}
extern "C" {
    pub fn jpeg_finish_decompress(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg_read_raw_data(
        cinfo: j_decompress_ptr,
        data: JSAMPIMAGE,
        max_lines: JDIMENSION,
    ) -> JDIMENSION;
}
extern "C" {
    pub fn jpeg_has_multiple_scans(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg_start_output(
        cinfo: j_decompress_ptr,
        scan_number: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn jpeg_finish_output(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg_input_complete(cinfo: j_decompress_ptr) -> boolean;
}
extern "C" {
    pub fn jpeg_new_colormap(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg_consume_input(cinfo: j_decompress_ptr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jpeg_calc_output_dimensions(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg_save_markers(
        cinfo: j_decompress_ptr,
        marker_code: ::std::os::raw::c_int,
        length_limit: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn jpeg_set_marker_processor(
        cinfo: j_decompress_ptr,
        marker_code: ::std::os::raw::c_int,
        routine: jpeg_marker_parser_method,
    );
}
extern "C" {
    pub fn jpeg_read_coefficients(cinfo: j_decompress_ptr) -> *mut jvirt_barray_ptr;
}
extern "C" {
    pub fn jpeg_write_coefficients(cinfo: j_compress_ptr, coef_arrays: *mut jvirt_barray_ptr);
}
extern "C" {
    pub fn jpeg_copy_critical_parameters(srcinfo: j_decompress_ptr, dstinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_abort_compress(cinfo: j_compress_ptr);
}
extern "C" {
    pub fn jpeg_abort_decompress(cinfo: j_decompress_ptr);
}
extern "C" {
    pub fn jpeg_abort(cinfo: j_common_ptr);
}
extern "C" {
    pub fn jpeg_destroy(cinfo: j_common_ptr);
}
extern "C" {
    pub fn jpeg_resync_to_restart(
        cinfo: j_decompress_ptr,
        desired: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn jpeg_read_icc_profile(
        cinfo: j_decompress_ptr,
        icc_data_ptr: *mut *mut JOCTET,
        icc_data_len: *mut ::std::os::raw::c_uint,
    ) -> boolean;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_comp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_prep_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_c_coef_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_writer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_converter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_downsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_forward_dct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_entropy_encoder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_decomp_master {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_main_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_coef_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_d_post_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_input_controller {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_marker_reader {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_entropy_decoder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_inverse_dct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_upsampler {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_deconverter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jpeg_color_quantizer {
    pub _address: u8,
}
